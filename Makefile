#---------------------------------------------------------------------------
# MakeFile
#
# Author: Keith D Brauss
# Date : 2016-8-12
#
#---------------------------------------------------------------------------

######################################################################
#FILES AND DIRECTORIES
######################################################################

# directories for files
# - BASEDIR for base of all directories
# - SRCDIR for source files (.cc files)
# - BUILDIR for object files (.o files)
# - BINDIR for binary file (executable)
# - INCDIR for header (include) files (.h files)
# - DEPDIR for dependency files (.d files)

BASEDIR=$(PWD)
SRCDIR=$(BASEDIR)/src
BUILDIR=$(BASEDIR)/build
BINDIR=$(BASEDIR)/bin
INCDIR=$(BASEDIR)/include
DEPDIR=$(BASEDIR)/deps
DOCDIR=$(BASEDIR)/docs

EXEC_FILE = hello

FILES = Main.cc\
        Util.cc\
        Point.cc\
        FmmTree.cc\
        Potential.cc\
        Box.cc
#        Example1.cc

SOURCES = $(patsubst %,$(SRCDIR)/%,$(FILES))
OBJECTS = $(patsubst %.cc,$(BUILDIR)/%.o,$(FILES))
DEPENDENCIES = $(patsubst %.cc,$(DEPDIR)/%.d,$(FILES))

# $(patsubst pattern,replacement,text)
# - finds whitespace separated words in text that match pattern
# - replaces them with replacement
# - '%' in pattern is a wildcard matching any number of characters within a word
# - '%' in replacement is replaced by the text that matched the '%' in pattern

EXEC = $(patsubst %,$(BINDIR)/%,$(EXEC_FILE))

######################################################################
#COMPILER VARIABLES
######################################################################

# project name (generate executable with this name)
TARGET   = hello
CC       = g++                  # This is the main compiler
# compiler flags
# - g for debugging information
# - Wall for 
# 
CFLAGS   = -c -g -std=gnu++11 -Wall -I$(INCDIR)
# linker flags
LFLAGS   = -Wall -g -I$(INCDIR)


######################################################################
#RULES
######################################################################

#target ... : prerequisites ...
#	recipe
#	...
#	...

all: $(EXEC)

$(EXEC): $(OBJECTS)
	@echo " Linking..."
	@echo " $(CC) $(LFLAGS) $(OBJECTS) -o $(EXEC)"; $(CC) $(LFLAGS) $^ -o $@
# $@ expands to the filename of the target of the rule
# here the target is $(EXEC) of the rule $(EXEC): $(OBJECTS)
# S^ expands to the names of all the prerequisites $(OBJECTS) of the rule $(EXEC): $(OBJECTS) 

$(BUILDIR)/%.o: $(SRCDIR)/%.cc
	@echo " Building object files..."
	@echo " $(CC) $(CFLAGS) $< -o $@"; $(CC) $(CFLAGS) $< -o $@ 
# $< expands to the name of the first prerequisite

$(DEPDIR)/%.d: $(SRCDIR)/%.cc
	@echo " Making dependency files..."
	@echo "$(CC) -I$(INCDIR) -MM -MG -MP -MT $*.o -MF $@ $<"; $(CC) -I$(INCDIR) -MM -MG -MP -MT $*.o -MF $@ $<
# $*.o expands to $(DEPDIR)/%.o ($* is stem - part of filename that matches '%')
# -MM outputs a rule suitable for make describing the dependencies of the source file
# -MG adds missing header files to the dependency list (assumes they are generated files)
# -MP instructs CPP to add a phony target for each dependency, causing each to depend on 
#  nothing.  These dummy rules work around errors make gives if yo remove header files
#  without updating the makefile to match
# -MF specifies to write the dependencies to '$@'

-include $(DEPENDENCIES)
# -include is a directive that tells make to suspend reading the current makefile 
#  and read one or more other makefiles before continuing
# the .d (dependency files) in the $(DEPDIR) directory are make files generated by the compiler

.PHONY : clean
clean :
	rm -f $(BUILDIR)/*.o $(DEPDIR)/*.d $(EXEC) $(DOCDIR)/*.tmp
# .PHONY - phony target to avoid conflict with a file of the same name

.PHONY : doc
doc :
	doxygen Doxyfile

.PHONY : htmlIndex
htmlIndex :
	@echo "Creating htmlIndex link to index.html in docs/html/ folder... "; 
	ln -s docs/html/index.html htmlIndex
	firefox htmlIndex

.PHONY : removeHtmlIndex
removeHtmlIndex :
	rm -f htmlIndex

############################################################################################
############################################################################################
############################################################################################
#PREVIOUS MAKEFILES THAT BUILD UP TO THIS ONE
############################################################################################
############################################################################################
############################################################################################



############################################################################################
#SECOND MAKEFILE WITH DIRECTORIES FOR OBJECT, SOURCE AND INCLUDE FILES 
############################################################################################

#CC       = g++                  # This is the main compiler

## directories for files
#BASEDIR=$(PWD)
#SRCDIR=$(PWD)/src
#BUILDIR=$(PWD)/build
#BINDIR=$(PWD)/bin
#INCDIR=$(PWD)/include

#OBJ_FILES = Main.o Util.o Point.o
#EXEC_FILE = hello
#OBJ_FILE_MAIN = Main.o
#OBJ_FILE_UTIL = Util.o
#OBJ_FILE_POINT = Point.o
#SOURCE_FILES = Main.cc Util.cc Point.cc

#OBJECTS = $(patsubst %,$(BUILDIR)/%,$(OBJ_FILES))
#OBJ_MAIN = $(patsubst %,$(BUILDIR)/%,$(OBJ_FILE_MAIN))
#OBJ_UTIL = $(patsubst %,$(BUILDIR)/%,$(OBJ_FILE_UTIL))
#OBJ_POINT = $(patsubst %,$(BUILDIR)/%,$(OBJ_FILE_POINT))

#EXEC = $(patsubst %,$(BINDIR)/%,$(EXEC_FILE))

#MKDIR_P  = mkdir -p

#all: $(EXEC)

#$(EXEC): $(OBJECTS)
#	@echo " Linking..."
#	@echo " $(CC) build/Main.o build/Point.o build/Util.o -o bin/${TARGET}"; $(CC) build/Main.o build/Point.o build/Util.o -o bin/${TARGET}


#$(OBJ_MAIN): src/Main.cc include/Point.h
#	@echo " Building Object File Main.o ..."
#	@echo " $(CC) -g -Wall -I include src -c build/Main.cc"; $(CC) -I include -c src/Main.cc -o build/Main.o

#$(OBJ_POINT): src/Point.cc include/Point.h include/Util.h
#	@echo " Building Object File Point.o ..."
#	@echo " $(CC) -g -Wall -I include -c source/Point.cc"; $(CC) -I include -c src/Point.cc -o build/Point.o

#$(OBJ_UTIL): src/Util.cc include/Util.h
#	@echo " Building Object File Util.o ..."
#	@echo " $(CC) -g -Wall -I include -c source/Util.cc"; $(CC) -I include -c src/Util.cc -o build/Util.o



############################################################################################
#FIRST MAKEFILE WITH DIRECTORIES FOR OBJECT, SOURCE AND INCLUDE FILES
############################################################################################

#TARGET   = hello
#CC       = g++                  # This is the main compiler

#all: bin/${TARGET}

#bin/${TARGET}: build/Main.o build/Point.o build/Util.o
#	@echo " Linking..."
#	@echo " $(CC) build/Main.o build/Point.o build/Util.o -o bin/${TARGET}"; $(CC) build/Main.o build/Point.o build/Util.o -o bin/${TARGET}


#build/Main.o: src/Main.cc include/Point.h
#	@echo " Building Object File Main.o ..."
#	@echo " $(CC) -g -Wall -I include src -c build/Main.cc"; $(CC) -I include -c src/Main.cc -o build/Main.o

#build/Point.o: src/Point.cc include/Point.h include/Util.h
#	@echo " Building Object File Point.o ..."
#	@echo " $(CC) -g -Wall -I include -c source/Point.cc"; $(CC) -I include -c src/Point.cc -o build/Point.o

#build/Util.o: src/Util.cc include/Util.h
#	@echo " Building Object File Util.o ..."
#	@echo " $(CC) -g -Wall -I include -c source/Util.cc"; $(CC) -I include -c src/Util.cc -o build/Util.o


#$(BINDIR)/$(TARGET): $(OBJECTS)
#	@$(LINKER) $@ $(LFLAGS) $(OBJECTS)
#	@echo "Linking complete!"

#$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
#	@$(CC) $(CFLAGS) -c $< -o $@
#	@echo "Compiled "$<" successfully!"

#.PHONEY: clean
#clean:
#	@$(rm) $(OBJECTS)
#	@echo "Cleanup complete!"

#.PHONEY: remove
#remove: clean
#	@$(rm) $(BINDIR/$(TARGET)
#	@echo "Executable removed!"



############################################################################################
#FIRST MAKEFILE WITH NO DIRECTORIES FOR OBJECT, SOURCE AND INCLUDE FILES
############################################################################################

#TARGET   = hello
#CC       = g++                  # This is the main compiler

#all: ${TARGET}

#${TARGET}: Main.o Point.o Util.o
#	@echo " Linking..."
#	@echo " $(CC) Main.o Point.o Util.o -o ${TARGET}"; $(CC) Main.o Point.o Util.o -o ${TARGET}


#Main.o: Main.cc Point.h
#	@echo " Building Object File Main.o ..."
#	@echo " $(CC) -g -Wall -I include -c Main.cc"; $(CC) -I include -c Main.cc
#  $^   means the names of all the prerequisites with spaces between 
#       them

#Point.o: Point.cc Point.h Util.h
#	@echo " Building Object File Point.o ..."
#	@echo " $(CC) -g -Wall -I include -c Point.cc"; $(CC) -I include -c Point.cc

#Util.o: Util.cc Util.h
#	@echo " Building Object File Util.o ..."
#	@echo " $(CC) -g -Wall -I include -c Util.cc"; $(CC) -I include -c Util.cc


